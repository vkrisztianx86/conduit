{"uid":"adfa0f0710e5f6ec","name":"Meglévő adat törlése","fullName":"Vizsgaremek_POM.test_main_conduit.Test_Main_Conduit#test_delete_data","historyId":"ad3b56a117c0aad6e7a80d4a6f7e269b","time":{"start":1681301153235,"stop":1681301171697,"duration":18462},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//i[@class=\"ion-trash-a\"]\"}\n  (Session info: headless chrome=112.0.5615.49)\nStacktrace:\n#0 0x55c5ad864fe3 <unknown>\n#1 0x55c5ad5a3d36 <unknown>\n#2 0x55c5ad5e0c4d <unknown>\n#3 0x55c5ad5e0d61 <unknown>\n#4 0x55c5ad61c6a4 <unknown>\n#5 0x55c5ad6018ed <unknown>\n#6 0x55c5ad61a232 <unknown>\n#7 0x55c5ad601693 <unknown>\n#8 0x55c5ad5d403a <unknown>\n#9 0x55c5ad5d517e <unknown>\n#10 0x55c5ad826dbd <unknown>\n#11 0x55c5ad82ac6c <unknown>\n#12 0x55c5ad8344b0 <unknown>\n#13 0x55c5ad82bd63 <unknown>\n#14 0x55c5ad7fec35 <unknown>\n#15 0x55c5ad84f138 <unknown>\n#16 0x55c5ad84f2c7 <unknown>\n#17 0x55c5ad85d093 <unknown>\n#18 0x7fdae4fceb43 <unknown>","statusTrace":"self = <test_main_conduit.Test_Main_Conduit object at 0x7fd07dbd6050>\n\n    @allure.id('TC11')\n    @allure.title('Meglévő adat törlése')\n    def test_delete_data(self):\n        self.conduit.sign_in()\n        data1 = test_comment\n        article = self.conduit.article()\n        article[0].click()\n        time.sleep(2)\n        self.conduit.comment_input().click()\n        time.sleep(2)\n        self.conduit.comment_input().clear()\n        self.conduit.comment_input().send_keys(data1)\n        time.sleep(2)\n        self.conduit.post_comment().click()\n        time.sleep(2)\n        card_text = self.conduit.card_text()[0]\n        assert card_text.text == data1\n        time.sleep(4)\n>       self.conduit.delete().click()\n\nVizsgaremek_POM/test_main_conduit.py:210: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nVizsgaremek_POM/field_identification.py:78: in delete\n    return self.browser.find_element(By.XPATH, '//i[@class=\"ion-trash-a\"]')\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd07dca2d70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x55c5ad84f2c7 \\\\u003Cunknown>\\\\n#17 0x55c5ad85d093 \\\\u003Cunknown>\\\\n#18 0x7fdae4fceb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//i[@class=\"ion-trash-a\"]\"}\nE         (Session info: headless chrome=112.0.5615.49)\nE       Stacktrace:\nE       #0 0x55c5ad864fe3 <unknown>\nE       #1 0x55c5ad5a3d36 <unknown>\nE       #2 0x55c5ad5e0c4d <unknown>\nE       #3 0x55c5ad5e0d61 <unknown>\nE       #4 0x55c5ad61c6a4 <unknown>\nE       #5 0x55c5ad6018ed <unknown>\nE       #6 0x55c5ad61a232 <unknown>\nE       #7 0x55c5ad601693 <unknown>\nE       #8 0x55c5ad5d403a <unknown>\nE       #9 0x55c5ad5d517e <unknown>\nE       #10 0x55c5ad826dbd <unknown>\nE       #11 0x55c5ad82ac6c <unknown>\nE       #12 0x55c5ad8344b0 <unknown>\nE       #13 0x55c5ad82bd63 <unknown>\nE       #14 0x55c5ad7fec35 <unknown>\nE       #15 0x55c5ad84f138 <unknown>\nE       #16 0x55c5ad84f2c7 <unknown>\nE       #17 0x55c5ad85d093 <unknown>\nE       #18 0x7fdae4fceb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_Test_Main_Conduit","time":{"start":1681301152063,"stop":1681301153235,"duration":1172},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_Test_Main_Conduit::0","time":{"start":1681301171769,"stop":1681301171828,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"as_id","value":"TC11"},{"name":"parentSuite","value":"Vizsgaremek_POM"},{"name":"suite","value":"test_main_conduit"},{"name":"subSuite","value":"Test_Main_Conduit"},{"name":"host","value":"fv-az627-562"},{"name":"thread","value":"3082-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Vizsgaremek_POM.test_main_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"adfa0f0710e5f6ec.json","parameterValues":[]}